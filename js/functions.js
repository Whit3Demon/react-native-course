//Любая функция это объект, и следовательно ею можно манипулировать как объектом

// Функции в JavaScript — это блоки кода, которые можно переиспользовать. Они позволяют выполнять определённые задачи или вычисления и упрощают структуру кода. Вот основные моменты:

// ** Что такое функции?
// Определение: Функция — это именованный блок кода, который можно вызывать (вызывать — это значит выполнять) в любой части программы.
// Аргументы: Функции могут принимать данные, называемые аргументами, которые могут влиять на их поведение.
// Возврат значения: Функции могут возвращать значения, которые можно использовать в других частях кода.

// ** Зачем нужны функции?
// Упрощение кода: Позволяют разбивать программу на более мелкие части, делая её проще для понимания.
// Повторное использование: Один и тот же код можно вызывать несколько раз, что уменьшает количество дублирующегося кода.
// Организация: Помогают структурировать программу логически.

// ** Как пользоваться функциями?
//Объявление функции:

{
  function имяФункции(аргументы) {
    return значение;
  }
}

{
  function сложить(a, b) {
    return a + b;
  }

  let результат = сложить(5, 3); // результат будет равен 8
}

//**Способы объявления функции
// - [[Function Declaration (Объявление функции)]]
// - [[Function Expression (Функциональное выражение)]]
// - [[Arrow Function (Стрелочная функция)]]
// - [[Immediately Invoked Function Expression (IIFE)]]
// - [[Function Constructor (Конструктор функции)]]
// - [[function* (функции-генераторы)]]

//**Function Declaration
// - **Поддержка Hoisting**: Функции, объявленные таким способом, поднимаются (hoisted) в начало своей области видимости. Это означает, что вы можете вызывать функцию до её объявления в коде.
// - **Создание именованной функции**: Имя функции используется для вызова и для ссылок в коде.
// - **Можно использовать до объявления в коде**.

{
  console.log(myFunction(2, 3)); // 5

  function myFunction(a, b) {
    return a + b;
  }
}

//**Arrow Function
//Стрелочные функции — это более короткий синтаксис для определения функций. Они имеют ряд особенностей, таких как отсутствие своего `this`, `arguments`, `super` и `new.target`. Обычно они используются для написания простых функций.

// - **Не поддерживает Hoisting**

{
  const myFunction = (a, b) => a + b;

  console.log(myFunction(2, 3)); // 5

  const myAnotherFunction = (a, b) => {
    return a + b;
  };

  console.log(myAnotherFunction(5, 10)); // 15
}
